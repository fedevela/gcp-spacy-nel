The following text file contains a complete project submission. The file is structured using clear delimiters to separate different files and their contents. The delimiters are formatted as follows:
Beginning of a File Section: <<<<<< BEGIN <file_path> >>>>>>
End of a File Section: <<<<<< END <file_path> >>>>>>

Contents:
.
├── app.py
├── Dockerfile
├── terraform
│   ├── main.tf
│   └── scripts
│       └── deploy.sh
└── tree.sh

3 directories, 5 files
<<<<<< BEGIN ./Dockerfile >>>>>>>
# Use the official Python image
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Copy the current directory contents into the container
COPY . /app

# Install the dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Expose the port
EXPOSE 8080

# Define the command to run the Flask app
CMD ["python", "app.py"]
<<<<<< END ./Dockerfile >>>>>>>
<<<<<< BEGIN ./terraform/main.tf >>>>>>>
provider "google" {
  project = "federicoveladataartcomproject"
  region  = "us-central1"
}

# Create the GCR (Google Container Registry)
resource "google_container_registry" "registry" {}

# Set up a Cloud Run service
resource "google_cloud_run_service" "spacy_nel_service" {
  name     = "spacy-nel"
  location = "us-central1"

  template {
    spec {
      containers {
        image = "gcr.io/federicoveladataartcomproject/spacy-nel:v1"
        ports {
          container_port = 8080
        }
      }
    }
  }

  traffic {
    percent         = 100
    latest_revision = true
  }

  autogenerate_revision_name = true
}

# Allow unauthenticated access to the Cloud Run service
resource "google_cloud_run_service_iam_policy" "noauth" {
  location    = google_cloud_run_service.spacy_nel_service.location
  project     = google_cloud_run_service.spacy_nel_service.project
  service     = google_cloud_run_service.spacy_nel_service.name
  policy_data = data.google_iam_policy.noauth.policy_data
}

data "google_iam_policy" "noauth" {
  binding {
    role    = "roles/run.invoker"
    members = ["allUsers"]
  }
}
<<<<<< END ./terraform/main.tf >>>>>>>
<<<<<< BEGIN ./terraform/scripts/deploy.sh >>>>>>>
#!/bin/bash

# Variables
PROJECT_ID="federicoveladataartcomproject"
IMAGE_NAME="spacy-nel"
REGION="us-central1"
TAG="v1"

# # Authenticate with Google Cloud
# echo "Authenticating with Google Cloud..."
# gcloud auth login

# Set the project ID
gcloud config set project $PROJECT_ID

# # Enable necessary APIs
# echo "Enabling necessary APIs..."
# gcloud services enable run.googleapis.com
# gcloud services enable containerregistry.googleapis.com

# Build the Docker image
echo "Building Docker image..."
docker build -t gcr.io/$PROJECT_ID/$IMAGE_NAME:$TAG .

# Push the Docker image to Google Container Registry (GCR)
echo "Pushing Docker image to Google Container Registry..."
docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:$TAG

# Deploy the Docker image to Cloud Run
echo "Deploying the Docker image to Cloud Run..."
gcloud run deploy $IMAGE_NAME \
  --image gcr.io/$PROJECT_ID/$IMAGE_NAME:$TAG \
  --region $REGION \
  --allow-unauthenticated

echo "Deployment completed!"
<<<<<< END ./terraform/scripts/deploy.sh >>>>>>>
<<<<<< BEGIN ./app.py >>>>>>>
from flask import Flask, request, jsonify
import spacy

# Initialize the Flask app
app = Flask(__name__)

# Load the spaCy model with NEL
nlp = spacy.load("en-core-web-sm")

@app.route('/process', methods=['POST'])
def process_text():
    # Get the text from the request
    content = request.json
    paragraph = content.get("paragraph", "")

    # Process the paragraph using spaCy
    doc = nlp(paragraph)

    # Extract named entities and their labels
    entities = [
        {"text": ent.text, "label": ent.label_}
        for ent in doc.ents
    ]

    # Return the entities as JSON
    return jsonify({"entities": entities})

# Main entry point
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
<<<<<< END ./app.py >>>>>>>
<<<<<< BEGIN ./.gitignore >>>>>>>
venv/
.terraform/
<<<<<< END ./.gitignore >>>>>>>
<<<<<< BEGIN ./tree.sh >>>>>>>
#!/bin/bash

# Check if a path argument is provided
if [ -z "$1" ]; then
  echo "Usage: $0 <path>"
  exit 1
fi

# Set the provided path as the target directory
TARGET_DIR="$1"

# Create or clear the project.txt file
echo "The following text file contains a complete project submission. The file is structured using clear delimiters to separate different files and their contents. The delimiters are formatted as follows:" > "$TARGET_DIR/project.txt"
echo "Beginning of a File Section: <<<<<< BEGIN <file_path> >>>>>>" >> "$TARGET_DIR/project.txt"
echo "End of a File Section: <<<<<< END <file_path> >>>>>>" >> "$TARGET_DIR/project.txt"
echo "" >> "$TARGET_DIR/project.txt"
echo "Contents:" >> "$TARGET_DIR/project.txt"

# Run the tree command on the specified directory and append output to project.txt
tree -I 'dist|build|venv|cache|node_modules|ios|\.gradle|\.git|\.nx|project.txt|package-lock.json|*.ico|*.png|*.jpg|*.jpeg|*.gif|*.jar|*.bin|*.exe|*.dll|*.class|*.so|*.dylib|*.zip|*.tar.gz|*.7z|*.log|*.map|*.svg|requirements.txt|*.keystore|*.idea' "$TARGET_DIR" >> "$TARGET_DIR/project.txt"

# Use find command to locate files, excluding specified paths, and append each file's content to project.txt
for file in $(find "$TARGET_DIR" -type f \
  ! \( \
    -path "*/dist/*" \
    -o -path "*/build/*" \
    -o -path "*/venv/*" \
    -o -path "*gradlew*" \
    -o -path "*/cache/*" \
    -o -path "*/node_modules/*" \
    -o -path "*/ios/*" \
    -o -path "*/.gradle/*" \
    -o -path "*/.git/*" \
    -o -path "*/network_security_config.xml" \
    -o -path "*/.nx/*" \
    -o -name "project.txt" \
    -o -name "package-lock.json" \
    -o -path "*/.idea/*" \
    -o -name "*.ico" \
    -o -name "*.png" \
    -o -name "*.jpg" \
    -o -name "*.jpeg" \
    -o -name "*.gif" \
    -o -name "*.jar" \
    -o -name "*.bin" \
    -o -name "*.exe" \
    -o -name "*.dll" \
    -o -name "*.class" \
    -o -name "*.so" \
    -o -name "*.dylib" \
    -o -name "*.zip" \
    -o -name "*.tar.gz" \
    -o -name "*.7z" \
    -o -name "*.log" \
    -o -name "*.map" \
    -o -name "*.svg" \
    -o -name "requirements.txt" \
    -o -name "*.keystore" \
  \) ); do
    echo "<<<<<< BEGIN $file >>>>>>>" >> "$TARGET_DIR/project.txt"
    cat "$file" >> "$TARGET_DIR/project.txt"
    echo "<<<<<< END $file >>>>>>>" >> "$TARGET_DIR/project.txt"
done
<<<<<< END ./tree.sh >>>>>>>
